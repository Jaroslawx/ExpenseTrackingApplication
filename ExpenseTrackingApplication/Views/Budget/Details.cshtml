@model ExpenseTrackingApplication.ViewModels.BudgetViewModels.BudgetDetailsViewModel

@{
ViewData["Title"] = "Budget Details";
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2>Details for Budget</h2>
    <div>
        <a asp-action="Edit" asp-route-id="@Model.Budget.Id" class="btn btn-warning">Edit</a>
        <a asp-action="Overview" class="btn btn-primary">Back to Overview</a>
    </div>
</div>

<div class="row">
    <!-- First card: 2/3 width -->
    <div class="col-lg-8 mb-3">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Budget Overview</h5>
                <hr>
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>Name:</strong> @Model.Budget.Name</p>
                    </div>
                    <div class="col-md-6">
                        <p class="balance @(Model.Budget.Balance >= 0 ? "positive" : "negative")">
                            <strong>Balance:</strong> @Model.Budget.Balance.ToString("C")
                        </p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>Total Expenses:</strong> -@Model.TotalExpenseAmount.ToString("C")</p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>Total Income:</strong> @Model.TotalIncomeAmount.ToString("C")</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Second card: 1/3 width -->
    <div class="col-lg-4 mb-3">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Statistics</h5>
                <hr>
                <p>aaaa</p>
                @* <p><strong>Total Categories:</strong> @Model.BudgetCategories.Count</p> *@
                @* <p><strong>Remaining Balance:</strong> @Model.RemainingBalance.ToString("C")</p> *@
                @* <p><strong>Average Monthly Spending:</strong> @Model.AverageMonthlySpending.ToString("C")</p> *@
                @* <p><strong>Months Active:</strong> @Model.MonthsActive</p> *@
            </div>
        </div>
    </div>
</div>

<div>
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h4>Budget Categories</h4>
        <a class="btn btn-success" asp-controller="BudgetCategory" asp-action="AddNewBudgetCategory" asp-route-budgetId="@Model.Budget.Id">Add Budget Category</a>
    </div>
    <div class="row">
        @foreach (var category in Model.BudgetCategories)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@category.Name</h5>
                        <p class="card-text">
                            <strong>Current Spending:</strong> @category.CurrentSpending<br/>
                            <strong>Monthly Limit:</strong> @category.Limit
                        </p>
                        <a class="btn btn-primary" asp-controller="BudgetCategory" asp-action="Details" asp-route-id="@category.Id">View Details</a>
                        <a class="btn btn-warning" asp-controller="BudgetCategory" asp-action="Edit" asp-route-id="@category.Id">Edit</a>
                        <button type="button" class="btn btn-danger btn-delete-icon position-absolute" data-bs-toggle="modal" data-bs-target="#DeleteBudgetCategory-@category.Id">Delete</button>
                        @await Html.PartialAsync("~/Views/BudgetCategory/_DeleteBudgetCategoryPartialView.cshtml", category)

                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div>
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h4>Expenses & Incomes</h4>
        <div>
            <div>
                <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#CreateExpenseModal-@Model.Budget.Id">Add Expense</button>
                @await Html.PartialAsync("~/Views/Expense/_CreateExpensePartialView.cshtml", new Expense { BudgetId = Model.Budget.Id })
            </div>
            <div>
                <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#CreateIncomeModal-@Model.Budget.Id">Add Income</button>
                @await Html.PartialAsync("~/Views/Income/_CreateIncomePartialView.cshtml", new Income { BudgetId = Model.Budget.Id })
            </div>
        </div>
    </div>
    <div class="list-group">
        @foreach (var dateGroup in Model.CombinedEntries.GroupBy(e => e.Date.ToShortDateString()))
        {
        <div class="list-group-item">
            <h5>@dateGroup.Key</h5>
            <ul class="list-unstyled mb-0">
                @foreach (var entry in dateGroup)
                {
                <li class="d-flex justify-content-between">
                    <span><strong>@entry.RecipientOrSource</strong></span>
                    <span class="@(entry.Type == "Income" ? "text-success" : "text-danger")">
                                @(entry.Type == "Expense" ? "-" : "") @entry.Amount.ToString("C")
                            </span>
                    <span><em>@entry.Category</em></span>
                </li>
                }
            </ul>
        </div>
        }
    </div>
</div>

<div>
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h4>Bills</h4>
        <div>
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#CreateBillModal-@Model.Budget.Id">Add Bill</button>
            @await Html.PartialAsync("~/Views/Bill/_CreateBillPartialView.cshtml", new Bill { BudgetId = Model.Budget.Id })
        </div>
    </div>

    <div class="list-group">
        @foreach (var bill in Model.Bills)
        {
        <div class="list-group-item">
            <h5>@bill.Name</h5>
            <ul class="list-unstyled mb-0">
                <li><strong>Amount:</strong> @bill.Amount.ToString("C")</li>
                <li><strong>Due Date:</strong> @bill.DueDate.ToShortDateString()</li>
                <li><strong>Frequency:</strong> @bill.Frequency.ToString()</li>
                <li class="@(bill.IsPaid ? "text-success" : "")">
                    <strong>Status:</strong> @(bill.IsPaid ? "Paid" : "Unpaid")
                </li>
                <li>
                    @if (!bill.IsPaid)
                    {
                        var daysLeft = (bill.DueDate - DateTime.Now.AddDays(-1)).Days;
                        if (daysLeft >= 0)
                        {
                            <strong>Days Left:</strong> <span>@daysLeft days left</span>
                        }
                        else
                        {
                            <strong>Days Left:</strong> <span class="text-danger">Overdue by @Math.Abs(daysLeft-1) days</span>
                        }
                        }
                    else
                    {
                        <strong>Days Left:</strong> <span class="text-muted">Already Paid</span>
                    }
                </li>
            </ul>
            <div class="mt-2">
                @if (!bill.IsPaid)
                {
                <form asp-controller="Bill" asp-action="Pay" asp-route-id="@bill.Id" method="post" class="d-inline">
                    <button type="submit" class="btn btn-success">Pay</button>
                </form>
                }
                else
                {
                <span class="text-muted">Already Paid</span>
                }
            </div>
        </div>
        }
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}